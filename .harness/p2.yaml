---
pipeline:
  projectIdentifier: "default_project"
  orgIdentifier: "default"
  tags: {}
  stages:
  - stage:
      name: "infrastructure"
      identifier: "s2"
      description: ""
      type: "Deployment"
      spec:
        deploymentType: "Kubernetes"
        service:
          serviceRef: "serv1"
        environment:
          environmentRef: "dev"
          deployToAll: false
          infrastructureDefinitions:
          - identifier: "eks"
        execution:
          steps:
          - step:
              type: "ShellScript"
              name: "Shell Script_1"
              identifier: "ShellScript_1"
              spec:
                shell: "Bash"
                onDelegate: true
                source:
                  type: "Inline"
                  spec:
                    script: "export GITHUB_USER=mattdarwin\nexport GITHUB_TOKEN=<+secrets.getValue(\"\
                      GitHub_PAT\")>\nexport GITHUB_REPOSITORY=mattdarwin/harness\n\
                      echo \"git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}\"\
                      \ngit clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}\n\
                      terraform -version\ncd harness/infra\nterraform init\nterraform\
                      \ plan\nterraform apply -auto-approve\nBUCKET_ARN=`terraform\
                      \ output s3_bucket_arn`\n#BUCKET_ARN=hello_world"
                environmentVariables:
                - name: "AWS_SECRET_ACCESS_KEY"
                  type: "String"
                  value: "<+secrets.getValue(\"AWS_SECRET_ACCESS_KEY\")>"
                - name: "AWS_ACCESS_KEY_ID"
                  type: "String"
                  value: "<+secrets.getValue(\"AWS_ACCESS_KEY_ID\")>"
                outputVariables:
                - name: "BUCKET_ARN"
                  type: "String"
                  value: "BUCKET_ARN"
              timeout: "10m"
          - step:
              type: "ShellScript"
              name: "Shell Script_2"
              identifier: "ShellScript_2"
              spec:
                shell: "Bash"
                onDelegate: true
                source:
                  type: "Inline"
                  spec:
                    script: "echo $BUCKET_ARN"
                environmentVariables:
                - name: "BUCKET_ARN"
                  type: "String"
                  value: "<+execution.steps.ShellScript_1.output.outputVariables.BUCKET_ARN>"
                outputVariables: []
              timeout: "10m"
          rollbackSteps:
          - step:
              name: "Rollback Rollout Deployment"
              identifier: "rollbackRolloutDeployment"
              type: "K8sRollingRollback"
              timeout: "10m"
              spec:
                pruningEnabled: false
      tags: {}
      failureStrategies:
      - onFailure:
          errors:
          - "AllErrors"
          action:
            type: "Ignore"
      variables: []
  - stage:
      name: "helm release"
      identifier: "helm_stage"
      description: ""
      type: "Deployment"
      spec:
        deploymentType: "NativeHelm"
        service:
          serviceRef: "helm_service"
        environment:
          environmentRef: "dev"
          deployToAll: false
          infrastructureDefinitions:
          - identifier: "eks_infra"
        execution:
          steps:
          - step:
              type: "ShellScript"
              name: "helm-repo-update"
              identifier: "helmrepoupdate"
              spec:
                shell: "Bash"
                onDelegate: true
                source:
                  type: "Inline"
                  spec:
                    script: "#helm repo add cloudecho https://cloudecho.github.io/charts/\n\
                      #helm repo update\n#helm install my-hello cloudecho/hello -n\
                      \ deploying --version=0.1.2"
                environmentVariables: []
                outputVariables: []
              timeout: "10m"
          - step:
              type: "HelmDeploy"
              name: "Helm Deploy_1"
              identifier: "HelmDeploy_1"
              spec:
                skipDryRun: false
                ignoreReleaseHistFailStatus: false
              timeout: "10m"
              failureStrategies: []
          rollbackSteps:
          - step:
              name: "Helm Rollback"
              identifier: "helmRollback"
              type: "HelmRollback"
              timeout: "10m"
              spec: {}
      tags: {}
      failureStrategies:
      - onFailure:
          errors:
          - "AllErrors"
          action:
            type: "StageRollback"
      variables: []
  - stage:
      name: "copy file to S3"
      identifier: "copy_file_to_S3"
      description: ""
      type: "Custom"
      spec:
        execution:
          steps:
          - step:
              type: "ShellScript"
              name: "copy DAG to S3"
              identifier: "copy_DAG_to_S3"
              spec:
                shell: "Bash"
                onDelegate: true
                source:
                  type: "Inline"
                  spec:
                    script: "echo \"destination bucket is \"\necho \"source file is\
                      \ \""
                environmentVariables: []
                outputVariables: []
              timeout: "10m"
      tags: {}
  identifier: "p2"
  name: "p2"
